import re
from CP_SOLVER.auto_func import *
from CP_SOLVER.con_solve import cons_cp_solve
from cons11 import *
act_x = {'x_0_99': {8, 0, 10, 2},'x_1_99': {0, 1, 4, 5},'x_3_99': {0, 1, 4, 5},
         "x_0_2": [10, 11, 14, 15], "x_0_4": [10, 11, 14, 15], "x_0_5": [10, 11, 14, 15], "x_0_6": [10, 11, 14, 15], "x_0_7": [10, 11, 14, 15], "x_0_8": [10, 11, 14, 15], "x_0_9": [10, 11, 14, 15], "x_0_10": [10, 11, 14, 15], "x_0_12": [10, 11, 14, 15], "x_0_13": [10, 11, 14, 15], "x_1_6": [5, 7, 13, 15], "x_1_9": [5, 7, 13, 15], "x_1_12": [5, 7, 13, 15], "x_1_15": [5, 7, 13, 15], "x_2_2": [10, 11, 14, 15], "x_2_15": [10, 11, 14, 15], "x_3_6": [5, 7, 13, 15], "x_3_14": [5, 7, 13, 15], "x_4_1": [10, 11, 14, 15], "x_4_11": [10, 11, 14, 15], "x_5_5": [5, 7, 13, 15], "x_5_9": [5, 7, 13, 15], "x_6_3": [10, 11, 14, 15], "x_6_10": [10, 11, 14, 15], "x_6_11": [10, 11, 14, 15], "x_6_15": [10, 11, 14, 15], "y_0_2": [5, 13, 7, 15], "y_0_4": [5, 13, 7, 15], "y_0_5": [5, 13, 7, 15], "y_0_6": [5, 13, 7, 15], "y_0_7": [5, 13, 7, 15], "y_0_8": [5, 13, 7, 15], "y_0_9": [5, 13, 7, 15], "y_0_10": [5, 13, 7, 15], "y_0_12": [5, 13, 7, 15], "y_0_13": [5, 13, 7, 15], "y_1_6": [10, 11, 14, 15], "y_1_9": [10, 11, 14, 15], "y_1_12": [10, 11, 14, 15], "y_1_15": [10, 11, 14, 15], "y_2_2": [5, 13, 7, 15], "y_2_15": [5, 13, 7, 15], "y_3_6": [10, 11, 14, 15], "y_3_14": [10, 11, 14, 15], "y_4_1": [5, 13, 7, 15], "y_4_11": [5, 13, 7, 15], "y_5_5": [10, 11, 14, 15], "y_5_9": [10, 11, 14, 15], "y_6_3": [5, 13, 7, 15], "y_6_10": [5, 13, 7, 15], "y_6_11": [5, 13, 7, 15], "y_6_15": [5, 13, 7, 15]}



# Z={'x_0_99': {0, 8, 2, 10}, 'x_2_99': {8, 0, 10, 2}}
def trans_equ(input_text,file_name,variable_constraints):
    variables = set(re.findall(r'[a-z]_\d+_\d+|k_\d+', input_text))

    variable_declarations = "\n".join(f"var 0..255: {var};" for var in sorted(variables))


    xor_constraints = []
    sbox_constraints = []
    range_constraints = []
    type_lst=[]
    for line in input_text.strip().split("\n"):
        line = re.sub(r'[\[\]]', '', line) 
        line = line.replace("= 0", "").strip()
        
    
        match = re.match(r'\+?\s*(x_\d+_\d+)\s*\+\s*(y_\d+_\d+)', line)
        
        if match:
            x_var, y_var = match.groups()
            sbox_constraints.append(f"constraint table([{x_var}, {y_var}], sbox_table);")
        else:
            vars_in_eq = re.findall(r'[a-z]_\d+_\d+|k_\d+', line)
            if len(vars_in_eq) > 1:
                constraint_type = f"bit_xor{len(vars_in_eq)}"
                xor_constraints.append(f"constraint {constraint_type}({', '.join(vars_in_eq)});")
                type_lst.append(constraint_type)
    cnt=0
    for var in sorted(variables):
        if var in variable_constraints:
            
            values = ", ".join(map(str, variable_constraints[var])) 
            range_constraints.append(f"array[1..{ len(variable_constraints[var]) }] of int: possible_values{cnt} = [ {values} ]; \n var 1..{ len(variable_constraints[var]) }: i{cnt};\n constraint {var} = possible_values{cnt}[i{cnt}];")
            # range_constraints.append(f"set of int: possible_values{cnt} = {{ {values} }};\n var possible_values{cnt} : {var};")
            cnt+=1
    # range_constraints.append("constraint k_42 in  {16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 176, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};")

    # range_constraints.append("constraint k_0 in { 8, 0, 10, 2 };")
    # range_constraints.append("constraint k_3 in { 8, 0, 10, 2 };")



    constraint_definitions = "\n".join(xor_constraints + sbox_constraints + range_constraints)


    minizinc_code = f"""include "table.mzn";

    % Define 4-bit integer variables (0..255)
    {variable_declarations}

    {constraint_definitions}

    array[0..255, 1..2] of int: sbox_table = 
        array2d(0..255, 1..2, [
            0 ,101 , 1 ,76 , 2 ,106 , 3 ,66 , 4 ,75 , 5 ,99 , 6 ,67 , 7 ,107 , 8 ,85 , 9 ,117 , 10 ,90 , 11 ,122 , 12 ,83 , 13 ,115 , 14 ,91 , 15 ,123 ,
            16 ,53 , 17 ,140 , 18 ,58 , 19 ,129 , 20 ,137 , 21 ,51 , 22 ,128 , 23 ,59 , 24 ,149 , 25 ,37 , 26 ,152 , 27 ,42 , 28 ,144 , 29 ,35 , 30 ,153 , 31 ,43 ,
            32 ,229 , 33 ,204 , 34 ,232 , 35 ,193 , 36 ,201 , 37 ,224 , 38 ,192 , 39 ,233 , 40 ,213 , 41 ,245 , 42 ,216 , 43 ,248 , 44 ,208 , 45 ,240 , 46 ,217 , 47 ,249 ,
            48 ,165 , 49 ,28 , 50 ,168 , 51 ,18 , 52 ,27 , 53 ,160 , 54 ,19 , 55 ,169 , 56 ,5 , 57 ,181 , 58 ,10 , 59 ,184 , 60 ,3 , 61 ,176 , 62 ,11 , 63 ,185 ,
            64 ,50 , 65 ,136 , 66 ,60 , 67 ,133 , 68 ,141 , 69 ,52 , 70 ,132 , 71 ,61 , 72 ,145 , 73 ,34 , 74 ,156 , 75 ,44 , 76 ,148 , 77 ,36 , 78 ,157 , 79 ,45 ,
            80 ,98 , 81 ,74 , 82 ,108 , 83 ,69 , 84 ,77 , 85 ,100 , 86 ,68 , 87 ,109 , 88 ,82 , 89 ,114 , 90 ,92 , 91 ,124 , 92 ,84 , 93 ,116 , 94 ,93 , 95 ,125 ,
            96 ,161 , 97 ,26 , 98 ,172 , 99 ,21 , 100 ,29 , 101 ,164 , 102 ,20 , 103 ,173 , 104 ,2 , 105 ,177 , 106 ,12 , 107 ,188 , 108 ,4 , 109 ,180 , 110 ,13 , 111 ,189 ,
            112 ,225 , 113 ,200 , 114 ,236 , 115 ,197 , 116 ,205 , 117 ,228 , 118 ,196 , 119 ,237 , 120 ,209 , 121 ,241 , 122 ,220 , 123 ,252 , 124 ,212 , 125 ,244 , 126 ,221 , 127 ,253 ,
            128 ,54 , 129 ,142 , 130 ,56 , 131 ,130 , 132 ,139 , 133 ,48 , 134 ,131 , 135 ,57 , 136 ,150 , 137 ,38 , 138 ,154 , 139 ,40 , 140 ,147 , 141 ,32 , 142 ,155 , 143 ,41 ,
            144 ,102 , 145 ,78 , 146 ,104 , 147 ,65 , 148 ,73 , 149 ,96 , 150 ,64 , 151 ,105 , 152 ,86 , 153 ,118 , 154 ,88 , 155 ,120 , 156 ,80 , 157 ,112 , 158 ,89 , 159 ,121 ,
            160 ,166 , 161 ,30 , 162 ,170 , 163 ,17 , 164 ,25 , 165 ,163 , 166 ,16 , 167 ,171 , 168 ,6 , 169 ,182 , 170 ,8 , 171 ,186 , 172 ,0 , 173 ,179 , 174 ,9 , 175 ,187 ,
            176 ,230 , 177 ,206 , 178 ,234 , 179 ,194 , 180 ,203 , 181 ,227 , 182 ,195 , 183 ,235 , 184 ,214 , 185 ,246 , 186 ,218 , 187 ,250 , 188 ,211 , 189 ,243 , 190 ,219 , 191 ,251 ,
            192 ,49 , 193 ,138 , 194 ,62 , 195 ,134 , 196 ,143 , 197 ,55 , 198 ,135 , 199 ,63 , 200 ,146 , 201 ,33 , 202 ,158 , 203 ,46 , 204 ,151 , 205 ,39 , 206 ,159 , 207 ,47 ,
            208 ,97 , 209 ,72 , 210 ,110 , 211 ,70 , 212 ,79 , 213 ,103 , 214 ,71 , 215 ,111 , 216 ,81 , 217 ,113 , 218 ,94 , 219 ,126 , 220 ,87 , 221 ,119 , 222 ,95 , 223 ,127 ,
            224 ,162 , 225 ,24 , 226 ,174 , 227 ,22 , 228 ,31 , 229 ,167 , 230 ,23 , 231 ,175 , 232 ,1 , 233 ,178 , 234 ,14 , 235 ,190 , 236 ,7 , 237 ,183 , 238 ,15 , 239 ,191 ,
            240 ,226 , 241 ,202 , 242 ,238 , 243 ,198 , 244 ,207 , 245 ,231 , 246 ,199 , 247 ,239 , 248 ,210 , 249 ,242 , 250 ,222 , 251 ,254 , 252 ,215 , 253 ,247 , 254 ,223 , 255 ,255 
        ]);

    % Predicate for bitwise XOR (n variables)
    predicate int2bin(var 0..255: x, array[0..7] of var bool: bits) =
        (bits[0] = (x div 1) mod 2) /\\
        (bits[1] = (x div 2) mod 2) /\\
        (bits[2] = (x div 4) mod 2) /\\
        (bits[3] = (x div 8) mod 2) /\\
        (bits[4] = (x div 16) mod 2) /\\
        (bits[5] = (x div 32) mod 2) /\\
        (bits[6] = (x div 64) mod 2) /\\
        (bits[7] = (x div 128) mod 2);


    """
    ind_lst=[]
    for i in type_lst:
        num=int(i[7:])
        if(num not in ind_lst):
            ind_lst.append(num)
    print(ind_lst)
    for i in ind_lst:
        minizinc_code+= gen_func_n(i)

    print(minizinc_code)
    with open(file_name, "w") as fw:
        fw.write(minizinc_code)
    fw.close()

def SOLVE_CP(cons_t,z,base_ind,f_pth):
    
    cons_name=f_pth+"./con_solve"+str(base_ind)+".mzn"
    solu_txt=f_pth+"./solve_results"+str(base_ind)+".txt"
    trans_equ(cons_t,cons_name,z)
    print(cons_cp_solve(solu_txt,cons_name))

if __name__=="__main__":
    cons_t=CONS1
    z=Z1
    cons_name="con_solve3.mzn"
    solu_txt="solve_results1.txt"
    
    trans_equ(cons_t,cons_name,z)
    print(cons_cp_solve(solu_txt,cons_name))