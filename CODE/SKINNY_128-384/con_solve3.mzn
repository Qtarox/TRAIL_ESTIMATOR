include "table.mzn";

    % Define 4-bit integer variables (0..255)
    var 0..255: k_4;
var 0..255: z_0_99;

    constraint bit_xor2(z_0_99, k_4);
array[1..96] of int: possible_values0 = [ 16, 17, 18, 19, 20, 21, 22, 23, 56, 57, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 86, 87, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 168, 169, 170, 171, 172, 173, 174, 175, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 208, 209, 210, 211, 212, 213, 214, 215, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 253, 254, 255 ]; 
 var 1..96: i0;
 constraint z_0_99 = possible_values0[i0];

    array[0..255, 1..2] of int: sbox_table = 
        array2d(0..255, 1..2, [
            0 ,101 , 1 ,76 , 2 ,106 , 3 ,66 , 4 ,75 , 5 ,99 , 6 ,67 , 7 ,107 , 8 ,85 , 9 ,117 , 10 ,90 , 11 ,122 , 12 ,83 , 13 ,115 , 14 ,91 , 15 ,123 ,
            16 ,53 , 17 ,140 , 18 ,58 , 19 ,129 , 20 ,137 , 21 ,51 , 22 ,128 , 23 ,59 , 24 ,149 , 25 ,37 , 26 ,152 , 27 ,42 , 28 ,144 , 29 ,35 , 30 ,153 , 31 ,43 ,
            32 ,229 , 33 ,204 , 34 ,232 , 35 ,193 , 36 ,201 , 37 ,224 , 38 ,192 , 39 ,233 , 40 ,213 , 41 ,245 , 42 ,216 , 43 ,248 , 44 ,208 , 45 ,240 , 46 ,217 , 47 ,249 ,
            48 ,165 , 49 ,28 , 50 ,168 , 51 ,18 , 52 ,27 , 53 ,160 , 54 ,19 , 55 ,169 , 56 ,5 , 57 ,181 , 58 ,10 , 59 ,184 , 60 ,3 , 61 ,176 , 62 ,11 , 63 ,185 ,
            64 ,50 , 65 ,136 , 66 ,60 , 67 ,133 , 68 ,141 , 69 ,52 , 70 ,132 , 71 ,61 , 72 ,145 , 73 ,34 , 74 ,156 , 75 ,44 , 76 ,148 , 77 ,36 , 78 ,157 , 79 ,45 ,
            80 ,98 , 81 ,74 , 82 ,108 , 83 ,69 , 84 ,77 , 85 ,100 , 86 ,68 , 87 ,109 , 88 ,82 , 89 ,114 , 90 ,92 , 91 ,124 , 92 ,84 , 93 ,116 , 94 ,93 , 95 ,125 ,
            96 ,161 , 97 ,26 , 98 ,172 , 99 ,21 , 100 ,29 , 101 ,164 , 102 ,20 , 103 ,173 , 104 ,2 , 105 ,177 , 106 ,12 , 107 ,188 , 108 ,4 , 109 ,180 , 110 ,13 , 111 ,189 ,
            112 ,225 , 113 ,200 , 114 ,236 , 115 ,197 , 116 ,205 , 117 ,228 , 118 ,196 , 119 ,237 , 120 ,209 , 121 ,241 , 122 ,220 , 123 ,252 , 124 ,212 , 125 ,244 , 126 ,221 , 127 ,253 ,
            128 ,54 , 129 ,142 , 130 ,56 , 131 ,130 , 132 ,139 , 133 ,48 , 134 ,131 , 135 ,57 , 136 ,150 , 137 ,38 , 138 ,154 , 139 ,40 , 140 ,147 , 141 ,32 , 142 ,155 , 143 ,41 ,
            144 ,102 , 145 ,78 , 146 ,104 , 147 ,65 , 148 ,73 , 149 ,96 , 150 ,64 , 151 ,105 , 152 ,86 , 153 ,118 , 154 ,88 , 155 ,120 , 156 ,80 , 157 ,112 , 158 ,89 , 159 ,121 ,
            160 ,166 , 161 ,30 , 162 ,170 , 163 ,17 , 164 ,25 , 165 ,163 , 166 ,16 , 167 ,171 , 168 ,6 , 169 ,182 , 170 ,8 , 171 ,186 , 172 ,0 , 173 ,179 , 174 ,9 , 175 ,187 ,
            176 ,230 , 177 ,206 , 178 ,234 , 179 ,194 , 180 ,203 , 181 ,227 , 182 ,195 , 183 ,235 , 184 ,214 , 185 ,246 , 186 ,218 , 187 ,250 , 188 ,211 , 189 ,243 , 190 ,219 , 191 ,251 ,
            192 ,49 , 193 ,138 , 194 ,62 , 195 ,134 , 196 ,143 , 197 ,55 , 198 ,135 , 199 ,63 , 200 ,146 , 201 ,33 , 202 ,158 , 203 ,46 , 204 ,151 , 205 ,39 , 206 ,159 , 207 ,47 ,
            208 ,97 , 209 ,72 , 210 ,110 , 211 ,70 , 212 ,79 , 213 ,103 , 214 ,71 , 215 ,111 , 216 ,81 , 217 ,113 , 218 ,94 , 219 ,126 , 220 ,87 , 221 ,119 , 222 ,95 , 223 ,127 ,
            224 ,162 , 225 ,24 , 226 ,174 , 227 ,22 , 228 ,31 , 229 ,167 , 230 ,23 , 231 ,175 , 232 ,1 , 233 ,178 , 234 ,14 , 235 ,190 , 236 ,7 , 237 ,183 , 238 ,15 , 239 ,191 ,
            240 ,226 , 241 ,202 , 242 ,238 , 243 ,198 , 244 ,207 , 245 ,231 , 246 ,199 , 247 ,239 , 248 ,210 , 249 ,242 , 250 ,222 , 251 ,254 , 252 ,215 , 253 ,247 , 254 ,223 , 255 ,255 
        ]);

    % Predicate for bitwise XOR (n variables)
    predicate int2bin(var 0..255: x, array[0..7] of var bool: bits) =
        (bits[0] = (x div 1) mod 2) /\
        (bits[1] = (x div 2) mod 2) /\
        (bits[2] = (x div 4) mod 2) /\
        (bits[3] = (x div 8) mod 2) /\
        (bits[4] = (x div 16) mod 2) /\
        (bits[5] = (x div 32) mod 2) /\
        (bits[6] = (x div 64) mod 2) /\
        (bits[7] = (x div 128) mod 2);


    
predicate bit_xor2(var 0..255: x0, var 0..255: x1) =
    let { 
        array[0..7] of var bool: x0_bits,
        array[0..7] of var bool: x1_bits
    } in (
        int2bin(x0, x0_bits) /\ 
        int2bin(x1, x1_bits) /\ 
        forall(i in 0..7)(
            ( x0_bits[i] + x1_bits[i]) mod 2 = 0
        )
    );
