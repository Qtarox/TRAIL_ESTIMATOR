import re
from CP_SOLVER.auto_func import *
from CP_SOLVER.con_solve import cons_cp_solve
act_x = {'x_0_99': {8, 0, 10, 2},'x_1_99': {0, 1, 4, 5},'x_3_99': {0, 1, 4, 5},
         "x_0_2": [10, 11, 14, 15], "x_0_4": [10, 11, 14, 15], "x_0_5": [10, 11, 14, 15], "x_0_6": [10, 11, 14, 15], "x_0_7": [10, 11, 14, 15], "x_0_8": [10, 11, 14, 15], "x_0_9": [10, 11, 14, 15], "x_0_10": [10, 11, 14, 15], "x_0_12": [10, 11, 14, 15], "x_0_13": [10, 11, 14, 15], "x_1_6": [5, 7, 13, 15], "x_1_9": [5, 7, 13, 15], "x_1_12": [5, 7, 13, 15], "x_1_15": [5, 7, 13, 15], "x_2_2": [10, 11, 14, 15], "x_2_15": [10, 11, 14, 15], "x_3_6": [5, 7, 13, 15], "x_3_14": [5, 7, 13, 15], "x_4_1": [10, 11, 14, 15], "x_4_11": [10, 11, 14, 15], "x_5_5": [5, 7, 13, 15], "x_5_9": [5, 7, 13, 15], "x_6_3": [10, 11, 14, 15], "x_6_10": [10, 11, 14, 15], "x_6_11": [10, 11, 14, 15], "x_6_15": [10, 11, 14, 15], "y_0_2": [5, 13, 7, 15], "y_0_4": [5, 13, 7, 15], "y_0_5": [5, 13, 7, 15], "y_0_6": [5, 13, 7, 15], "y_0_7": [5, 13, 7, 15], "y_0_8": [5, 13, 7, 15], "y_0_9": [5, 13, 7, 15], "y_0_10": [5, 13, 7, 15], "y_0_12": [5, 13, 7, 15], "y_0_13": [5, 13, 7, 15], "y_1_6": [10, 11, 14, 15], "y_1_9": [10, 11, 14, 15], "y_1_12": [10, 11, 14, 15], "y_1_15": [10, 11, 14, 15], "y_2_2": [5, 13, 7, 15], "y_2_15": [5, 13, 7, 15], "y_3_6": [10, 11, 14, 15], "y_3_14": [10, 11, 14, 15], "y_4_1": [5, 13, 7, 15], "y_4_11": [5, 13, 7, 15], "y_5_5": [10, 11, 14, 15], "y_5_9": [10, 11, 14, 15], "y_6_3": [5, 13, 7, 15], "y_6_10": [5, 13, 7, 15], "y_6_11": [5, 13, 7, 15], "y_6_15": [5, 13, 7, 15]}

# input_text = """
# + [ y_0_4 ] + [ y_0_11 ] + x_1_9 + k_4= 0 
#  + [ y_1_3 ] + y_1_9 + [ x_2_15 ] + k_13= 0 
#  + x_1_9 + y_1_9= 0 
#  + [ y_1_3 ] + y_1_9 + [ y_1_12 ] + [ x_2_3 ] + k_13= 0 
# """

# input_text = """
#  + y_0_1 + x_1_5 + k_1= 0 
#  + y_0_1 + [ y_0_11 ] + [ x_1_13 ] + k_1= 0
#  + y_1_5 + [ y_1_8 ] + [ x_2_10 ] + k_14= 0
#  + x_1_5 + y_1_5= 0
#  """
cons1="""
z_0_99 + k1 + k2_1_4 = 0
z_1_99 + k1 + k2_1_2 = 0

"""
z1={'z_0_99': {0, 1, 4, 5},'z_1_99': {0, 1, 4, 5, 8, 9, 12, 13}}

# Z={'x_0_99': {0, 8, 2, 10}, 'x_2_99': {8, 0, 10, 2}}
def trans_equ(input_text,file_name,variable_constraints):
    variables = list(re.findall(r'[a-z]_\d+_\d+|k2_\d+_\d+|k3_\d+_\d+|k1_\d+', input_text))
    for v in variables:
        if(v[0:2]=="k2" and v[0:-2] not in variables and len(v[0:-2])>3):
            variables.append(v[0:-2])
        if(v[0:2]=="k3" and v[0:-2] not in variables and len(v[0:-2])>3):
            variables.append(v[0:-2])
    variables=set(variables)

    variable_declarations = "\n".join(f"var 0..15: {var};" for var in sorted(variables))


    xor_constraints = []
    sbox_constraints = []
    range_constraints = []
    type_lst=[]
    for line in input_text.strip().split("\n"):
        line = re.sub(r'[\[\]]', '', line) 
        line = line.replace("= 0", "").strip()
        
    
        match = re.match(r'\+?\s*(x_\d+_\d+)\s*\+\s*(y_\d+_\d+)', line)
        
        if match:
            x_var, y_var = match.groups()
            sbox_constraints.append(f"constraint table([{x_var}, {y_var}], sbox_table);")
        else:
            vars_in_eq = re.findall(r'[a-z]_\d+_\d+|k1_\d+|k2_\d+_\d+|k3_\d+_\d+', line)
            if len(vars_in_eq) > 1:
                constraint_type = f"bit_xor{len(vars_in_eq)}"
                xor_constraints.append(f"constraint {constraint_type}({', '.join(vars_in_eq)});")
                type_lst.append(constraint_type)
    for vk in variables:
        if(vk[0:3]=="k2_" and vk[0:-1]!="k2_" and vk[0:-2]!="k2_"):
            sbox_constraints.append(f"constraint table([{vk}, {vk[:-2]}], sbox_table{vk[-1]});")
        if(vk[0:3]=="k3_" and vk[0:-1]!="k3_" and vk[0:-2]!="k3_"):
            sbox_constraints.append(f"constraint table([{vk}, {vk[:-2]}], fbox_table{vk[-1]});")
    cnt=0
    for var in sorted(variables):
        if var in variable_constraints:
            
            values = ", ".join(map(str, variable_constraints[var])) 
            range_constraints.append(f"array[1..{ len(variable_constraints[var]) }] of int: possible_values{cnt} = [ {values} ]; \n var 1..{ len(variable_constraints[var]) }: i{cnt};\n constraint {var} = possible_values{cnt}[i{cnt}];")
            # range_constraints.append(f"set of int: possible_values{cnt} = {{ {values} }};\n var possible_values{cnt} : {var};")
            cnt+=1
    # range_constraints.append("constraint k_42 in  {16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 176, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};")

    # range_constraints.append("constraint k_0 in { 8, 0, 10, 2 };")
    # range_constraints.append("constraint k_3 in { 8, 0, 10, 2 };")



    constraint_definitions = "\n".join(xor_constraints + sbox_constraints + range_constraints)


    minizinc_code = f"""include "table.mzn";

    % Define 4-bit integer variables (0..15)
    {variable_declarations}

    {constraint_definitions}

    array[0..15, 1..2] of int: sbox_table = 
        array2d(0..15, 1..2, [
            0, 12,  1, 6,  2, 9,  3, 0,
            4, 1,   5, 10, 6, 2,  7, 11,
            8, 3,   9, 8,  10, 5, 11, 13,
            12, 4,  13, 14, 14, 7, 15, 15
        ]);
        array[0..15, 1..2] of int: fbox_table0 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 1 ,2, 2 ,3, 3 ,4, 4 ,5, 5 ,6, 6 ,7, 7 ,8, 8 ,9, 9 ,10, 10 ,11, 11 ,12, 12 ,13, 13 ,14, 14 ,15, 15
 ]);
    array[0..15, 1..2] of int: fbox_table1 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 8 ,2, 1 ,3, 9 ,4, 2 ,5, 10 ,6, 3 ,7, 11 ,8, 12 ,9, 4 ,10, 13 ,11, 5 ,12, 14 ,13, 6 ,14, 15 ,15, 7
 ]);
    array[0..15, 1..2] of int: fbox_table2 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 12 ,2, 8 ,3, 4 ,4, 1 ,5, 13 ,6, 9 ,7, 5 ,8, 14 ,9, 2 ,10, 6 ,11, 10 ,12, 15 ,13, 3 ,14, 7 ,15, 11
 ]);
    array[0..15, 1..2] of int: fbox_table3 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 14 ,2, 12 ,3, 2 ,4, 8 ,5, 6 ,6, 4 ,7, 10 ,8, 15 ,9, 1 ,10, 3 ,11, 13 ,12, 7 ,13, 9 ,14, 11 ,15, 5
 ]);
    array[0..15, 1..2] of int: fbox_table4 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 15 ,2, 14 ,3, 1 ,4, 12 ,5, 3 ,6, 2 ,7, 13 ,8, 7 ,9, 8 ,10, 9 ,11, 6 ,12, 11 ,13, 4 ,14, 5 ,15, 10
 ]);
    array[0..15, 1..2] of int: fbox_table5 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 7 ,2, 15 ,3, 8 ,4, 14 ,5, 9 ,6, 1 ,7, 6 ,8, 11 ,9, 12 ,10, 4 ,11, 3 ,12, 5 ,13, 2 ,14, 10 ,15, 13
 ]);
    array[0..15, 1..2] of int: fbox_table6 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 11 ,2, 7 ,3, 12 ,4, 15 ,5, 4 ,6, 8 ,7, 3 ,8, 5 ,9, 14 ,10, 2 ,11, 9 ,12, 10 ,13, 1 ,14, 13 ,15, 6
 ]);
    array[0..15, 1..2] of int: fbox_table7 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 5 ,2, 11 ,3, 14 ,4, 7 ,5, 2 ,6, 12 ,7, 9 ,8, 10 ,9, 15 ,10, 1 ,11, 4 ,12, 13 ,13, 8 ,14, 6 ,15, 3
 ]);
    array[0..15, 1..2] of int: fbox_table8 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 10 ,2, 5 ,3, 15 ,4, 11 ,5, 1 ,6, 14 ,7, 4 ,8, 13 ,9, 7 ,10, 8 ,11, 2 ,12, 6 ,13, 12 ,14, 3 ,15, 9
 ]);
    array[0..15, 1..2] of int: fbox_table9 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 13 ,2, 10 ,3, 7 ,4, 5 ,5, 8 ,6, 15 ,7, 2 ,8, 6 ,9, 11 ,10, 12 ,11, 1 ,12, 3 ,13, 14 ,14, 9 ,15, 4
 ]);
    array[0..15, 1..2] of int: fbox_table10 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 6 ,2, 13 ,3, 11 ,4, 10 ,5, 12 ,6, 7 ,7, 1 ,8, 3 ,9, 5 ,10, 14 ,11, 8 ,12, 9 ,13, 15 ,14, 4 ,15, 2
 ]);
    array[0..15, 1..2] of int: fbox_table11 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 3 ,2, 6 ,3, 5 ,4, 13 ,5, 14 ,6, 11 ,7, 8 ,8, 9 ,9, 10 ,10, 15 ,11, 12 ,12, 4 ,13, 7 ,14, 2 ,15, 1
 ]);
    array[0..15, 1..2] of int: fbox_table12 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 9 ,2, 3 ,3, 10 ,4, 6 ,5, 15 ,6, 5 ,7, 12 ,8, 4 ,9, 13 ,10, 7 ,11, 14 ,12, 2 ,13, 11 ,14, 1 ,15, 8
 ]);
    array[0..15, 1..2] of int: fbox_table13 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 4 ,2, 9 ,3, 13 ,4, 3 ,5, 7 ,6, 10 ,7, 14 ,8, 2 ,9, 6 ,10, 11 ,11, 15 ,12, 1 ,13, 5 ,14, 8 ,15, 12
 ]);
    array[0..15, 1..2] of int: fbox_table14 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 2 ,2, 4 ,3, 6 ,4, 9 ,5, 11 ,6, 13 ,7, 15 ,8, 1 ,9, 3 ,10, 5 ,11, 7 ,12, 8 ,13, 10 ,14, 12 ,15, 14
 ]);
    array[0..15, 1..2] of int: sbox_table0 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 1 ,2, 2 ,3, 3 ,4, 4 ,5, 5 ,6, 6 ,7, 7 ,8, 8 ,9, 9 ,10, 10 ,11, 11 ,12, 12 ,13, 13 ,14, 14 ,15, 15
 ]);
    array[0..15, 1..2] of int: sbox_table1 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 2 ,2, 4 ,3, 6 ,4, 9 ,5, 11 ,6, 13 ,7, 15 ,8, 1 ,9, 3 ,10, 5 ,11, 7 ,12, 8 ,13, 10 ,14, 12 ,15, 14
 ]);
    array[0..15, 1..2] of int: sbox_table2 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 4 ,2, 9 ,3, 13 ,4, 3 ,5, 7 ,6, 10 ,7, 14 ,8, 2 ,9, 6 ,10, 11 ,11, 15 ,12, 1 ,13, 5 ,14, 8 ,15, 12
 ]);
    array[0..15, 1..2] of int: sbox_table3 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 9 ,2, 3 ,3, 10 ,4, 6 ,5, 15 ,6, 5 ,7, 12 ,8, 4 ,9, 13 ,10, 7 ,11, 14 ,12, 2 ,13, 11 ,14, 1 ,15, 8
 ]);
    array[0..15, 1..2] of int: sbox_table4 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 3 ,2, 6 ,3, 5 ,4, 13 ,5, 14 ,6, 11 ,7, 8 ,8, 9 ,9, 10 ,10, 15 ,11, 12 ,12, 4 ,13, 7 ,14, 2 ,15, 1
 ]);
    array[0..15, 1..2] of int: sbox_table5 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 6 ,2, 13 ,3, 11 ,4, 10 ,5, 12 ,6, 7 ,7, 1 ,8, 3 ,9, 5 ,10, 14 ,11, 8 ,12, 9 ,13, 15 ,14, 4 ,15, 2
 ]);
    array[0..15, 1..2] of int: sbox_table6 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 13 ,2, 10 ,3, 7 ,4, 5 ,5, 8 ,6, 15 ,7, 2 ,8, 6 ,9, 11 ,10, 12 ,11, 1 ,12, 3 ,13, 14 ,14, 9 ,15, 4
 ]);
    array[0..15, 1..2] of int: sbox_table7 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 10 ,2, 5 ,3, 15 ,4, 11 ,5, 1 ,6, 14 ,7, 4 ,8, 13 ,9, 7 ,10, 8 ,11, 2 ,12, 6 ,13, 12 ,14, 3 ,15, 9
 ]);
    array[0..15, 1..2] of int: sbox_table8 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 5 ,2, 11 ,3, 14 ,4, 7 ,5, 2 ,6, 12 ,7, 9 ,8, 10 ,9, 15 ,10, 1 ,11, 4 ,12, 13 ,13, 8 ,14, 6 ,15, 3
 ]);
    array[0..15, 1..2] of int: sbox_table9 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 11 ,2, 7 ,3, 12 ,4, 15 ,5, 4 ,6, 8 ,7, 3 ,8, 5 ,9, 14 ,10, 2 ,11, 9 ,12, 10 ,13, 1 ,14, 13 ,15, 6
 ]);
    array[0..15, 1..2] of int: sbox_table10 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 7 ,2, 15 ,3, 8 ,4, 14 ,5, 9 ,6, 1 ,7, 6 ,8, 11 ,9, 12 ,10, 4 ,11, 3 ,12, 5 ,13, 2 ,14, 10 ,15, 13
 ]);
    array[0..15, 1..2] of int: sbox_table11 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 15 ,2, 14 ,3, 1 ,4, 12 ,5, 3 ,6, 2 ,7, 13 ,8, 7 ,9, 8 ,10, 9 ,11, 6 ,12, 11 ,13, 4 ,14, 5 ,15, 10
 ]);
    array[0..15, 1..2] of int: sbox_table12 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 14 ,2, 12 ,3, 2 ,4, 8 ,5, 6 ,6, 4 ,7, 10 ,8, 15 ,9, 1 ,10, 3 ,11, 13 ,12, 7 ,13, 9 ,14, 11 ,15, 5
 ]);
    array[0..15, 1..2] of int: sbox_table13 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 12 ,2, 8 ,3, 4 ,4, 1 ,5, 13 ,6, 9 ,7, 5 ,8, 14 ,9, 2 ,10, 6 ,11, 10 ,12, 15 ,13, 3 ,14, 7 ,15, 11
 ]);
    array[0..15, 1..2] of int: sbox_table14 =
       array2d(0..15, 1..2, [
     0, 0 ,1, 8 ,2, 1 ,3, 9 ,4, 2 ,5, 10 ,6, 3 ,7, 11 ,8, 12 ,9, 4 ,10, 13 ,11, 5 ,12, 14 ,13, 6 ,14, 15 ,15, 7
 ]);


    % Predicate for bitwise XOR (n variables)
    predicate int2bin(var 0..15: x, array[0..3] of var bool: bits) =
        (bits[0] = (x div 1) mod 2) /\\
        (bits[1] = (x div 2) mod 2) /\\
        (bits[2] = (x div 4) mod 2) /\\
        (bits[3] = (x div 8) mod 2);


    """
    ind_lst=[]
    for i in type_lst:
        num=int(i[7:])
        if(num not in ind_lst):
            ind_lst.append(num)
    print(ind_lst)
    for i in ind_lst:
        minizinc_code+= gen_func_n(i)

    print(minizinc_code)
    with open(file_name, "w") as fw:
        fw.write(minizinc_code)
    fw.close()
def SOLVE_CP(cons_t,z,base_ind,f_pth):
    
    cons_name=f_pth+"./con_solve"+str(base_ind)+".mzn"
    solu_txt=f_pth+"./solve_results"+str(base_ind)+".txt"
    trans_equ(cons_t,cons_name,z)
    print(cons_cp_solve(solu_txt,cons_name))

if __name__=="__main__":
    cons_t=cons1
    z=z1
    cons_name="con_solve3.mzn"
    solu_txt="solve_results1.txt"

    trans_equ(cons_t,cons_name,z)
    print(cons_cp_solve(solu_txt,cons_name))